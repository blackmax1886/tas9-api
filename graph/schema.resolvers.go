package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"math/rand"

	"github.com/blackmax1886/tas9-api/graph/model"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*model.Task, error) {
	tasks := &model.Task{
		Content: &input.Content,
		ID:      fmt.Sprintf("T%d", rand.Int()),
		User:    &model.User{ID: input.UserID, Name: "user " + input.UserID},
		Done:    false,
		Type:    input.Type,
	}
	r.tasks = append(r.tasks, tasks)
	return tasks, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	return r.tasks, nil
}

// Subtasks is the resolver for the subtasks field.
func (r *queryResolver) Subtasks(ctx context.Context) ([]*model.Subtask, error) {
	return r.subtasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
